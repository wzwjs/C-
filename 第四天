//这几天准备将一个比较整合的c++项目实现一下，------联系人管理系统，昨天其实写了代码，只是记不得了写博客了
//今天将其补上，

系统中需要实现的功能如下：
添加联系人：向通讯录中添加新人，信息包括（姓名、性别、年龄、联系电话、家庭住址）最多记录1000人
显示联系人：显示通讯录中所有联系人信息
删除联系人：按照姓名进行删除指定联系人
查找联系人：按照姓名查看指定联系人信息
修改联系人：按照姓名重新修改指定联系人
清空联系人：清空通讯录中所有信息
退出通讯录：退出当前使用的通讯录


  这一天我主要确定 了。1，代码的整体结构，2，显示这个文字，3，添加联系人，-4，添加完成就清屏，5，没有执行退出程序，程序就一直循环。

1，//首先看到需求，我先将c++的基本框架给写出来

#include<iostream>
using namespace std;
#include<string>


int main() {

  system("pause");
  return 0;
}

2,//为了显示美观，就设计了一个UI界面了，虽然没有上QT,但咱们不能太随便了，做事还是要有一点追求,
  //  为了实现这个要求，就封装了一个ShowMenu函数，在主函数开始就调用

#include<iostream>
using namespace std;
#include<string>

//Fuction_Area
//Menu_Space
void showMenu() {
	cout << "********************" << endl;
	cout << "***  1,添加联系人***" << endl;
	cout << "***  2,显示联系人***" << endl;
	cout << "***  3,删除联系人***" << endl;
	cout << "***  4,查找联系人***" << endl;
	cout << "***  5,修改联系人***" << endl;
	cout << "***  6,清空联系人***" << endl;
	cout << "***  0,退出通讯录***" << endl;
	cout << "********************" << endl;

};


int main() {
  showMenu();
  system("pause");
  return 0;
}


3，//然后我们执行一看，发现一点击就结束程序了，这跟目标追求不一样，为了完成只要不退出程序就一直在程序中，我这里写了一个死循环，在死循环里面，就留一个出口，去退出程序

#include<iostream>
using namespace std;
#include<string>

//Fuction_Area
//Menu_Space
void showMenu() {
	cout << "********************" << endl;
	cout << "***  1,添加联系人***" << endl;
	cout << "***  2,显示联系人***" << endl;
	cout << "***  3,删除联系人***" << endl;
	cout << "***  4,查找联系人***" << endl;
	cout << "***  5,修改联系人***" << endl;
	cout << "***  6,清空联系人***" << endl;
	cout << "***  0,退出通讯录***" << endl;
	cout << "********************" << endl;

};


int main() {
while (true) {
	showMenu();
	int select = 0;
	cin >> select;
	switch (select) {
	case 1://	1,添加联系人
		break;
	case 2: //2,显示联系人
		break;
	case 3://3,删除联系人
		break;
	case 4:// 4,查找联系人
		break;
	case 5:// 5,修改联系人
		break;
	case 6://6,清空联系人
		break;
	case 0:// 0,退出通讯录
		cout << "欢迎下次使用" << endl;
		system("pause");
		return 0;
		break;

	}
};
  system("pause");
  return 0;
}


4,// 然后为了存储联系人，通讯录，我这里设计了两个结构体，并且实例化结构体

#include<iostream>
using namespace std;
#include<string>

//Struct_Area
//联系人的结构体
struct link_pepole {
	string name;
	int sex;
	//	string sex;
	int age;
	int moblie_number;
	string address;
};
//通讯录的结构体
struct link_book {
	link_pepole arr[MAX];
	int now_size;
};

int main() {
  	// 初始化通讯录变量并给当前通讯录变量赋初值
link_book one;
one.now_size = 0;
while (true) {
	showMenu();
	int select = 0;
	cin >> select;
	switch (select) {
	case 1://	1,添加联系人
		break;
	case 2: //2,显示联系人
		break;
	case 3://3,删除联系人
		break;
	case 4:// 4,查找联系人
		break;
	case 5:// 5,修改联系人
		break;
	case 6://6,清空联系人
		break;
	case 0:// 0,退出通讯录
		cout << "欢迎下次使用" << endl;
		system("pause");
		return 0;
		break;

	}
};
  system("pause");
  return 0;
}
5，//然就是写一个添加的功能，就封装一个添加的函数，在输入1的时候调用，
#include<iostream>
using namespace std;
#include<string>

//Struct_Area
//联系人的结构体
struct link_pepole {
	string name;
	int sex;
	//	string sex;
	int age;
	int moblie_number;
	string address;
};
//通讯录的结构体
struct link_book {
	link_pepole arr[MAX];
	int now_size;
};


//add_function
void add(link_book * one) {

	//当通讯录已经满时
	if (one->now_size >= MAX) {
		cout << "当前通讯录已经有1000个人了" << endl;
		return;  //?
	}

	//当通讯录没有满时
	else {
		//姓名
		cout << "请输入姓名" << endl;
		cin >> one->arr[one->now_size].name;
		// 性别
		/*	这是我写的代码，跟老师的代码比起来感觉代码的健全性，可读性；还是有距离
		cout << "男性输入1,女性输入0" << endl;
		cin >> one->arr[one->now_size].sex;
		*/
			//老师写的代码
		cout << "请输入性别：" << endl;
		cout << "1---男" << endl;
		cout << "0----女" << endl;
		int sex = 0;
		while (true) {
			cin >> sex;
			if (sex == 1 || sex == 2)
			{
				one->arr[one->now_size].sex = sex;
				break;
			}
			else
				cout << "你输入的数字有误。请重新输入";
		}
		// 年龄
		/*	这是自己看题目写的代码，感觉代码可读性，健全性可以提高一下，以下就是学习老师关于性别写法的对于改进我年龄的写法
			cout << "请输入年龄" << endl;
			cin >> one->arr[one->now_size].age;
		*/
		cout << "请输入年龄：（年龄在0~150之间的整数）" << endl;
		int age = 0;
		while (true) {
			cin >> age;
			if (age > 0 && age < 150) {    //如何判断将输入非数字类型，关键是要判断输入非数字类型，应该怎么判断
				one->arr[one->now_size].age = age;
				break;
			}
			else
				cout << "你输入的年龄有误，请重新输入";
		}
		

	
		// 联系电话
		cout << "请输入联系电话" << endl;
		cin >> one->arr[one->now_size].moblie_number;

		// 家庭住址
		cout << "请输入家庭住址" << endl;
		cin >> one->arr[one->now_size].address;
		one->now_size++;
		cout << "当前通讯录的人数为：" << one->now_size << endl;
		cout << "添加成功" << endl;
		system("pause");//请点击任意键
		system("cls");//清屏操作
	}

};

int main() {
  	// 初始化通讯录变量并给当前通讯录变量赋初值
link_book one;
one.now_size = 0;
while (true) {
	showMenu();
	int select = 0;
	cin >> select;
	switch (select) {
	//	case 1:add(one);  1,添加联系人   自己写的错误1，值传递不修改实际的参数，
	//									让实参改变即应该使用地址传递
	// 	//修改代码为
case 1:add(&one);
	break;
	case 2: //2,显示联系人
		break;
	case 3://3,删除联系人
		break;
	case 4:// 4,查找联系人
		break;
	case 5:// 5,修改联系人
		break;
	case 6://6,清空联系人
		break;
	case 0:// 0,退出通讯录
		cout << "欢迎下次使用" << endl;
		system("pause");
		return 0;
		break;

	}
};
  system("pause");
  return 0;
}


//总结，这一天我主要确定 了。1，代码的整体结构，2，显示这个文字，3，添加联系人，-4，添加完成就清屏，5，没有执行退出程序，程序就一直循环。
  代码就和第五天的代码一起给出来了
