#include<iostream>
using namespace std;


//内存四区
	//代码区：存放函数体的二进制代码，由操作系统进行管理
	//全局区：存放全局变量和静态变量以及常量
	//栈区：由编译器自动分配释放
	//堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收

//内存四区的意义
	//不同区域存放不同的数据，赋予不同的生命周期，灵活编程


//代码编译后，生成exe可执行程序，未执行程序前，分为两个区域，

//代码区
	//代码区：存放CPU执行的机器指令
	//代码区是共享的：共享的目的是对于频繁被访问的程序，只需要在内存中有一份代码即可
	//内存是只读的，使其只读的原因是为了防止程序意外地修改了它的指令

//全局区
	//全局变量和静态变量存放在此，
	//常量区，字符串常量和其他常量也存放在此
	//该区域的数据在程序结束后由操作系统释放


//全局变量
int g_a = 10;
int g_b = 10;

//全局常量
const int c_g_a = 10;
const int c_g_b = 10;


int main() {


	//全局变量
	cout << "全局变量g_a的地址：" << (int)&g_a << endl;
	cout << "全局变量g_b的地址：" << (int)&g_b << endl;

	//全局常量
	cout << "全局常量c_g_a的地址：" << (int)&c_g_a<< endl;
	cout << "全局常量c_g_b的地址：" << (int)&c_g_b<< endl;
	 

	//字符串常量
	cout << "字符串常量的地址：" << (int)&"c_g_a" << endl;
	cout << "字符串常量的地址：" << (int)&"c_g_a" << endl;

	
	//静态变量
	static int s_a = 10;
	static int s_b = 10;

	cout << "静态变量s_a的地址：" << (int)&s_a << endl;
	cout << "静态变量s_b的地址：" << (int)&s_b << endl;



	//局部变量
	int a = 10;
	int b = 10;

	cout << "局部变量a的地址：" << (int)&a << endl;
	cout << "局部变量b的地址：" << (int)&b << endl;

	//局部常量

	const int c_la = 10;
	const int c_lb = 10;

	cout << "局部常量c_la的地址：" << (int)&c_la << endl;
	cout << "局部常量c_lb的地址：" << (int)&c_lb << endl;

	system("pause");
	return 0;
}

//总结：除局部变量和常量在内存在比较近，其余的比较近
		//C++在程序运行前分为全局区和代码区
		//代码区的特点是只读和共享
		//全局区中存放全局变量，静态变量，常量
		//常量区中存放const 修饰的全局常量和字符串常量